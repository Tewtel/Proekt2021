// Decompiled with JetBrains decompiler
// Type: System.Data.SQLite.SQLiteStreamChangeSet
// Assembly: System.Data.SQLite, Version=1.0.112.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139
// MVID: 5EE7A633-7B43-42FB-884D-DDCB2E803B48
// Assembly location: D:\labs\2semestr\ProektObnovaCode\AvitoRinger\System.Data.SQLite.dll

using System.Collections;
using System.Collections.Generic;
using System.IO;

namespace System.Data.SQLite
{
  /// <summary>
  /// This class represents a set of changes that are backed by a
  /// <see cref="T:System.IO.Stream" /> instance.
  /// </summary>
  internal sealed class SQLiteStreamChangeSet : 
    SQLiteChangeSetBase,
    ISQLiteChangeSet,
    IEnumerable<ISQLiteChangeSetMetadataItem>,
    IEnumerable,
    IDisposable
  {
    /// <summary>
    /// The <see cref="T:System.Data.SQLite.SQLiteStreamAdapter" /> instance that is managing
    /// the underlying input <see cref="T:System.IO.Stream" /> used as the backing
    /// store for the set of changes associated with this instance.
    /// </summary>
    private SQLiteStreamAdapter inputStreamAdapter;
    /// <summary>
    /// The <see cref="T:System.Data.SQLite.SQLiteStreamAdapter" /> instance that is managing
    /// the underlying output <see cref="T:System.IO.Stream" /> used as the backing
    /// store for the set of changes generated by the <see cref="M:System.Data.SQLite.SQLiteStreamChangeSet.Invert" />
    /// or <see cref="M:System.Data.SQLite.SQLiteStreamChangeSet.CombineWith(System.Data.SQLite.ISQLiteChangeSet)" /> methods.
    /// </summary>
    private SQLiteStreamAdapter outputStreamAdapter;
    /// <summary>
    /// The <see cref="T:System.IO.Stream" /> instance used as the backing store for
    /// the set of changes associated with this instance.
    /// </summary>
    private Stream inputStream;
    /// <summary>
    /// The <see cref="T:System.IO.Stream" /> instance used as the backing store for
    /// the set of changes generated by the <see cref="M:System.Data.SQLite.SQLiteStreamChangeSet.Invert" /> or
    /// <see cref="M:System.Data.SQLite.SQLiteStreamChangeSet.CombineWith(System.Data.SQLite.ISQLiteChangeSet)" /> methods.
    /// </summary>
    private Stream outputStream;
    /// <summary>The flags used to create the change set iterator.</summary>
    private SQLiteChangeSetStartFlags startFlags;
    /// <summary>Non-zero if this object instance has been disposed.</summary>
    private bool disposed;

    /// <summary>
    /// Constructs an instance of this class using the specified streams
    /// and wrapped native connection handle.
    /// </summary>
    /// <param name="inputStream">
    /// The <see cref="T:System.IO.Stream" /> where the raw byte data for the set of
    /// changes may be read.
    /// </param>
    /// <param name="outputStream">
    /// The <see cref="T:System.IO.Stream" /> where the raw byte data for resulting
    /// sets of changes may be written.
    /// </param>
    /// <param name="handle">
    /// The wrapped native connection handle to be associated with this
    /// set of changes.
    /// </param>
    /// <param name="connectionFlags">
    /// The flags associated with the connection represented by the
    /// <paramref name="handle" /> value.
    /// </param>
    internal SQLiteStreamChangeSet(
      Stream inputStream,
      Stream outputStream,
      SQLiteConnectionHandle handle,
      SQLiteConnectionFlags connectionFlags)
      : base(handle, connectionFlags)
    {
      this.inputStream = inputStream;
      this.outputStream = outputStream;
    }

    /// <summary>
    /// Constructs an instance of this class using the specified streams
    /// and wrapped native connection handle.
    /// </summary>
    /// <param name="inputStream">
    /// The <see cref="T:System.IO.Stream" /> where the raw byte data for the set of
    /// changes may be read.
    /// </param>
    /// <param name="outputStream">
    /// The <see cref="T:System.IO.Stream" /> where the raw byte data for resulting
    /// sets of changes may be written.
    /// </param>
    /// <param name="handle">
    /// The wrapped native connection handle to be associated with this
    /// set of changes.
    /// </param>
    /// <param name="connectionFlags">
    /// The flags associated with the connection represented by the
    /// <paramref name="handle" /> value.
    /// </param>
    /// <param name="startFlags">
    /// The flags used to create the change set iterator.
    /// </param>
    internal SQLiteStreamChangeSet(
      Stream inputStream,
      Stream outputStream,
      SQLiteConnectionHandle handle,
      SQLiteConnectionFlags connectionFlags,
      SQLiteChangeSetStartFlags startFlags)
      : base(handle, connectionFlags)
    {
      this.inputStream = inputStream;
      this.outputStream = outputStream;
      this.startFlags = startFlags;
    }

    /// <summary>
    /// Throws an exception if the input stream or its associated stream
    /// adapter are invalid.
    /// </summary>
    private void CheckInputStream()
    {
      if (this.inputStream == null)
        throw new InvalidOperationException("input stream unavailable");
      if (this.inputStreamAdapter != null)
        return;
      this.inputStreamAdapter = new SQLiteStreamAdapter(this.inputStream, this.GetFlags());
    }

    /// <summary>
    /// Throws an exception if the output stream or its associated stream
    /// adapter are invalid.
    /// </summary>
    private void CheckOutputStream()
    {
      if (this.outputStream == null)
        throw new InvalidOperationException("output stream unavailable");
      if (this.outputStreamAdapter != null)
        return;
      this.outputStreamAdapter = new SQLiteStreamAdapter(this.outputStream, this.GetFlags());
    }

    /// <summary>
    /// This method "inverts" the set of changes within this instance.
    /// Applying an inverted set of changes to a database reverses the
    /// effects of applying the uninverted changes.  Specifically:
    /// <![CDATA[<ul>]]><![CDATA[<li>]]>
    /// Each DELETE change is changed to an INSERT, and
    /// <![CDATA[</li>]]><![CDATA[<li>]]>
    /// Each INSERT change is changed to a DELETE, and
    /// <![CDATA[</li>]]><![CDATA[<li>]]>
    /// For each UPDATE change, the old.* and new.* values are exchanged.
    /// <![CDATA[</li>]]><![CDATA[</ul>]]>
    /// This method does not change the order in which changes appear
    /// within the set of changes. It merely reverses the sense of each
    /// individual change.
    /// </summary>
    /// <returns>
    /// Since the resulting set of changes is written to the output stream,
    /// this method always returns null.
    /// </returns>
    public ISQLiteChangeSet Invert()
    {
      this.CheckDisposed();
      this.CheckInputStream();
      this.CheckOutputStream();
      SQLiteErrorCode errorCode = UnsafeNativeMethods.sqlite3changeset_invert_strm(this.inputStreamAdapter.GetInputDelegate(), IntPtr.Zero, this.outputStreamAdapter.GetOutputDelegate(), IntPtr.Zero);
      if (errorCode != SQLiteErrorCode.Ok)
        throw new SQLiteException(errorCode, "sqlite3changeset_invert_strm");
      return (ISQLiteChangeSet) null;
    }

    /// <summary>
    /// This method combines the specified set of changes with the ones
    /// contained in this instance.
    /// </summary>
    /// <param name="changeSet">
    /// The changes to be combined with those in this instance.
    /// </param>
    /// <returns>
    /// Since the resulting set of changes is written to the output stream,
    /// this method always returns null.
    /// </returns>
    public ISQLiteChangeSet CombineWith(ISQLiteChangeSet changeSet)
    {
      this.CheckDisposed();
      this.CheckInputStream();
      this.CheckOutputStream();
      if (!(changeSet is SQLiteStreamChangeSet liteStreamChangeSet))
        throw new ArgumentException("not a stream based change set", nameof (changeSet));
      liteStreamChangeSet.CheckInputStream();
      SQLiteErrorCode errorCode = UnsafeNativeMethods.sqlite3changeset_concat_strm(this.inputStreamAdapter.GetInputDelegate(), IntPtr.Zero, liteStreamChangeSet.inputStreamAdapter.GetInputDelegate(), IntPtr.Zero, this.outputStreamAdapter.GetOutputDelegate(), IntPtr.Zero);
      if (errorCode != SQLiteErrorCode.Ok)
        throw new SQLiteException(errorCode, "sqlite3changeset_concat_strm");
      return (ISQLiteChangeSet) null;
    }

    /// <summary>
    /// Attempts to apply the set of changes in this instance to the
    /// associated database.
    /// </summary>
    /// <param name="conflictCallback">
    /// The <see cref="T:System.Data.SQLite.SessionConflictCallback" /> delegate that will need
    /// to handle any conflicting changes that may arise.
    /// </param>
    /// <param name="clientData">
    /// The optional application-defined context data.  This value may be
    /// null.
    /// </param>
    public void Apply(SessionConflictCallback conflictCallback, object clientData)
    {
      this.CheckDisposed();
      this.Apply(conflictCallback, (SessionTableFilterCallback) null, clientData);
    }

    /// <summary>
    /// Attempts to apply the set of changes in this instance to the
    /// associated database.
    /// </summary>
    /// <param name="conflictCallback">
    /// The <see cref="T:System.Data.SQLite.SessionConflictCallback" /> delegate that will need
    /// to handle any conflicting changes that may arise.
    /// </param>
    /// <param name="tableFilterCallback">
    /// The optional <see cref="T:System.Data.SQLite.SessionTableFilterCallback" /> delegate
    /// that can be used to filter the list of tables impacted by the set
    /// of changes.
    /// </param>
    /// <param name="clientData">
    /// The optional application-defined context data.  This value may be
    /// null.
    /// </param>
    public void Apply(
      SessionConflictCallback conflictCallback,
      SessionTableFilterCallback tableFilterCallback,
      object clientData)
    {
      this.CheckDisposed();
      this.CheckInputStream();
      if (conflictCallback == null)
        throw new ArgumentNullException(nameof (conflictCallback));
      UnsafeNativeMethods.xSessionFilter xFilter = this.GetDelegate(tableFilterCallback, clientData);
      UnsafeNativeMethods.xSessionConflict xConflict = this.GetDelegate(conflictCallback, clientData);
      SQLiteErrorCode errorCode = UnsafeNativeMethods.sqlite3changeset_apply_strm(this.GetIntPtr(), this.inputStreamAdapter.GetInputDelegate(), IntPtr.Zero, xFilter, xConflict, IntPtr.Zero);
      if (errorCode != SQLiteErrorCode.Ok)
        throw new SQLiteException(errorCode, "sqlite3changeset_apply_strm");
    }

    /// <summary>
    /// Creates an <see cref="T:System.Collections.IEnumerator" /> capable of iterating over the
    /// items within this set of changes.
    /// </summary>
    /// <returns>
    /// The new <see cref="T:System.Collections.Generic.IEnumerator`1" />
    /// instance.
    /// </returns>
    public IEnumerator<ISQLiteChangeSetMetadataItem> GetEnumerator() => this.startFlags != SQLiteChangeSetStartFlags.None ? (IEnumerator<ISQLiteChangeSetMetadataItem>) new SQLiteStreamChangeSetEnumerator(this.inputStream, this.GetFlags(), this.startFlags) : (IEnumerator<ISQLiteChangeSetMetadataItem>) new SQLiteStreamChangeSetEnumerator(this.inputStream, this.GetFlags());

    /// <summary>
    /// Creates an <see cref="T:System.Collections.IEnumerator" /> capable of iterating over the
    /// items within this set of changes.
    /// </summary>
    /// <returns>
    /// The new <see cref="T:System.Collections.IEnumerator" /> instance.
    /// </returns>
    IEnumerator IEnumerable.GetEnumerator() => (IEnumerator) this.GetEnumerator();

    /// <summary>
    /// Throws an exception if this object instance has been disposed.
    /// </summary>
    private void CheckDisposed()
    {
      if (this.disposed)
        throw new ObjectDisposedException(typeof (SQLiteStreamChangeSet).Name);
    }

    /// <summary>Disposes or finalizes this object instance.</summary>
    /// <param name="disposing">
    /// Non-zero if this object is being disposed; otherwise, this object
    /// is being finalized.
    /// </param>
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (this.disposed || !disposing)
          return;
        if (this.outputStreamAdapter != null)
        {
          this.outputStreamAdapter.Dispose();
          this.outputStreamAdapter = (SQLiteStreamAdapter) null;
        }
        if (this.inputStreamAdapter != null)
        {
          this.inputStreamAdapter.Dispose();
          this.inputStreamAdapter = (SQLiteStreamAdapter) null;
        }
        if (this.outputStream != null)
          this.outputStream = (Stream) null;
        if (this.inputStream == null)
          return;
        this.inputStream = (Stream) null;
      }
      finally
      {
        base.Dispose(disposing);
        this.disposed = true;
      }
    }
  }
}
